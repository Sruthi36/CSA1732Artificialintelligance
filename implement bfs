from collections import deque

def bfs(graph, start_node):
    visited = set()  # Set to keep track of visited nodes
    queue = deque([start_node])  # Queue for BFS, starting with the start_node

    while queue:
        # Dequeue a vertex from the queue
        current_node = queue.popleft()
        
        # If the current node has not been visited yet
        if current_node not in visited:
            print(current_node, end=" ")  # Process the current node (e.g., print it)
            visited.add(current_node)  # Mark the node as visited

            # Enqueue all adjacent nodes that haven't been visited
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    queue.append(neighbor)

# Example usage
if __name__ == "__main__":
    # Example graph represented as an adjacency list
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }

    start_node = 'A'
    print("BFS traversal starting from node", start_node)
    bfs(graph, start_node)
