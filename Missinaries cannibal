from itertools import permutations

def is_valid_solution(assignment, letters, words):
    # Create a mapping from letters to digits
    letter_to_digit = {letter: digit for letter, digit in zip(letters, assignment)}

    # Convert the words to their numeric form
    numeric_words = []
    for word in words:
        numeric_value = 0
        for letter in word:
            numeric_value = numeric_value * 10 + letter_to_digit[letter]
        numeric_words.append(numeric_value)

    # Check if the equation is satisfied
    if sum(numeric_words[:-1]) == numeric_words[-1]:
        return True
    return False

def cryptarithmetic_solver(words):
    # Extract unique letters
    letters = set(''.join(words))
    if len(letters) > 10:
        raise ValueError("Too many unique letters for digits 0-9")

    # Try all permutations of digits 0-9 for the letters
    for perm in permutations(range(10), len(letters)):
        # Check if the solution is valid
        if is_valid_solution(perm, letters, words):
            # Create the solution mapping
            solution = {letter: digit for letter, digit in zip(letters, perm)}
            return solution

    return None

def main():
    # Example puzzle: SEND + MORE = MONEY
    words = ["SEND", "MORE", "MONEY"]
    solution = cryptarithmetic_solver(words)

    if solution:
        print("Solution found:")
        for letter, digit in solution.items():
            print(f"{letter}: {digit}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
