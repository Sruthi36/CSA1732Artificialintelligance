import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start to current Node
        self.h = 0  # Heuristic cost estimate from current Node to end
        self.f = 0  # Total cost

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    # Using Manhattan distance as the heuristic
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(start, end, grid):
    start_node = Node(start)
    end_node = Node(end)

    open_list = []
    closed_list = set()
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)

        if current_node == end_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        neighbors = [
            (0, -1), (0, 1), (-1, 0), (1, 0)  # Adjacent squares (up, down, left, right)
        ]

        for new_position in neighbors:
            node_position = (current_node.position[0] + new_position[0], 
                             current_node.position[1] + new_position[1])

            if (node_position[0] < 0 or node_position[0] >= len(grid) or
                node_position[1] < 0 or node_position[1] >= len(grid[0])):
                continue  # Out of bounds

            if grid[node_position[0]][node_position[1]] != 0:
                continue  # Obstacle

            neighbor = Node(node_position, current_node)

            if neighbor.position in closed_list:
                continue  # Already processed this node

            neighbor.g = current_node.g + 1
            neighbor.h = heuristic(neighbor.position, end_node.position)
            neighbor.f = neighbor.g + neighbor.h

            if any(open_node for open_node in open_list if neighbor == open_node and neighbor.g > open_node.g):
                continue  # This path is not better

            heapq.heappush(open_list, neighbor)

    return None  # No path found

# Example usage
grid = [
    [0, 1, 0, 0, 0, 0],
    [0, 1, 0, 1, 1, 0],
    [0, 0, 0, 0, 1, 0],
    [0, 1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0, 0]
]

start = (0, 0)  # Starting position
end = (4, 5)    # Goal position

path = astar(start, end, grid)
print("Path found:", path)
