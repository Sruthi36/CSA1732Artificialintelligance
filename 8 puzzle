import heapq


class PuzzleState:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.empty_tile_pos = self.find_empty_tile()
    
    def find_empty_tile(self):
        return tuple(np.argwhere(self.board == 0)[0])
    
    def is_goal(self):
        return array_equal(self.board, array([[1, 2, 3], [4, 5, 6], [7, 8, 0]]))
    
    def neighbors(self):
        neighbors = []
        x, y = self.empty_tile_pos
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_board = self.board.copy()
                new_board[x, y], new_board[new_x, new_y] = new_board[new_x, new_y], new_board[x, y]
                neighbors.append(PuzzleState(new_board, self.moves + 1, self))
        
        return neighbors
    
    def __eq__(self, other):
        return array_equal(self.board, other.board)
    
    def __lt__(self, other):
        return (self.moves + self.manhattan_distance()) < (other.moves + other.manhattan_distance())
    
    def manhattan_distance(self):
        goal_positions = {1: (0, 0), 2: (0, 1), 3: (0, 2), 4: (1, 0), 5: (1, 1), 6: (1, 2), 7: (2, 0), 8: (2, 1), 0: (2, 2)}
        total_distance = 0
        
        for x in range(3):
            for y in range(3):
                value = self.board[x, y]
                goal_x, goal_y = goal_positions[value]
                total_distance += abs(x - goal_x) + abs(y - goal_y)
        
        return total_distance
    
    def __hash__(self):
        return hash(str(self.board))

def a_star_search(initial_state):
    open_set = []
    heapq.heappush(open_set, (initial_state.manhattan_distance(), initial_state))
    closed_set = set()
    
    while open_set:
        _, current_state = heapq.heappop(open_set)
        
        if current_state.is_goal():
            return current_state
        
        closed_set.add(current_state)
        
        for neighbor in current_state.neighbors():
            if neighbor not in closed_set:
                heapq.heappush(open_set, (neighbor.moves + neighbor.manhattan_distance(), neighbor))
    
    return None

def print_solution(solution_state):
    path = []
    current = solution_state
    
    while current:
        path.append(current.board)
        current = current.previous
    
    path.reverse()
    
    for step in path:
        print(step, "\n")

# Example usage
initial_board = ([[1, 2, 3], [4, 0, 5], [7, 8, 6]])
initial_state = PuzzleState(initial_board)
solution = a_star_search(initial_state)

if solution:
    print("Solution found!")
    print_solution(solution)
else:
    print("No solution exists.")
