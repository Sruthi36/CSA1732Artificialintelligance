from itertools import permutations

def solve_cryptarithmetic(words, result):
    # Extract unique letters
    unique_letters = set(''.join(words) + result)
    
    if len(unique_letters) > 10:
        raise ValueError("Too many unique letters for digits 0-9")

    # Define the function to convert letters to digits
    def to_digit(word, letter_to_digit):
        return int(''.join(str(letter_to_digit[letter]) for letter in word))
    
    # Try all permutations of digits 0-9 for the unique letters
    for perm in permutations(range(10), len(unique_letters)):
        letter_to_digit = dict(zip(unique_letters, perm))
        
        # Ensure no leading zeros
        if any(letter_to_digit[word[0]] == 0 for word in words + [result]):
            continue
        
        # Convert words and result to their numeric values
        words_values = [to_digit(word, letter_to_digit) for word in words]
        result_value = to_digit(result, letter_to_digit)
        
        # Check if the sum of words equals the result
        if sum(words_values) == result_value:
            return letter_to_digit
    
    return None

def main():
    words = ["SEND", "MORE"]
    result = "MONEY"
    solution = solve_cryptarithmetic(words, result)
    
    if solution:
        print("Solution found:")
        for letter, digit in solution.items():
            print(f"{letter}: {digit}")
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
