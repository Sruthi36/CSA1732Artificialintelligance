% Facts about disea
% Initial state: monkey at door, on the floor, box at window, monkey not holding banana
initial_state(state(at_door, on_floor, at_window, not_holding)).

% Final state: monkey at middle, on box, holding banana
final_state(state(at_middle, on_box, at_middle, holding)).

% Move actions
move(state(at_door, on_floor, Box, Has),
     go_to_door,
     state(at_door, on_floor, Box, Has)).

move(state(at_window, on_floor, Box, Has),
     go_to_window,
     state(at_window, on_floor, Box, Has)).

move(state(at_middle, on_floor, Box, Has),
     go_to_middle,
     state(at_middle, on_floor, Box, Has)).

move(state(Place, on_floor, Place, Has),
     push_box_to_middle,
     state(at_middle, on_floor, at_middle, Has)).

move(state(Place, on_floor, Place, Has),
     climb_box,
     state(Place, on_box, Place, Has)).

move(state(at_middle, on_box, at_middle, not_holding),
     grasp_banana,
     state(at_middle, on_box, at_middle, holding)).

% Solve the problem
solve_problem(State, Moves) :-
    final_state(State),
    Moves = [].

solve_problem(State, [Move | Moves]) :-
    move(State, Move, NextState),
    solve_problem(NextState, Moves).

% Example query to solve the problem
% ?- initial_state(InitialState), solve_problem(InitialState, Moves).
% Initial state: monkey at door, on the floor, box at window, monkey not holding banana
initial_state(state(at_door, on_floor, at_window, not_holding)).

% Final state: monkey at middle, on box, holding banana
final_state(state(at_middle, on_box, at_middle, holding)).

% Move actions
move(state(at_door, on_floor, Box, Has),
     go_to_door,
     state(at_door, on_floor, Box, Has)).

move(state(at_window, on_floor, Box, Has),
     go_to_window,
     state(at_window, on_floor, Box, Has)).

move(state(at_middle, on_floor, Box, Has),
     go_to_middle,
     state(at_middle, on_floor, Box, Has)).

move(state(Place, on_floor, Place, Has),
     push_box_to_middle,
     state(at_middle, on_floor, at_middle, Has)).

move(state(Place, on_floor, Place, Has),
     climb_box,
     state(Place, on_box, Place, Has)).

move(state(at_middle, on_box, at_middle, not_holding),
     grasp_banana,
     state(at_middle, on_box, at_middle, holding)).

% Solve the problem
solve_problem(State, Moves) :-
    final_state(State),
    Moves = [].

solve_problem(State, [Move | Moves]) :-
    move(State, Move, NextState),
    solve_problem(NextState, Moves).

% Example query to solve the problem
% ?- initial_state(InitialState), solve_problem(InitialState, Moves).
ses and dietary recommendations
diet_for_disease(diabetes, 'Low sugar, high fiber, whole grains, fruits, vegetables, lean proteins').
diet_for_disease(hypertension, 'Low sodium, high potassium, fruits, vegetables, whole grains, low-fat dairy').
diet_for_disease(heart_disease, 'Low saturated fat, low cholesterol, high fiber, fruits, vegetables, whole grains').
diet_for_disease(anemia, 'High iron, iron-fortified cereals, lean meats, beans, spinach, vitamin C-rich foods').
diet_for_disease(obesity, 'Low calorie, high fiber, fruits, vegetables, lean proteins, whole grains').
diet_for_disease(gout, 'Low purine, avoid red meat, seafood, alcohol, high in fruits, vegetables, whole grains').
diet_for_disease(gluten_intolerance, 'Gluten-free, avoid wheat, barley, rye, eat gluten-free grains and starches').

% Rule to suggest diet based on disease
suggest_diet(Disease, Diet) :-
    diet_for_disease(Disease, Diet).

% Example Queries:
% ?- suggest_diet(diabetes, Diet).
% ?- suggest_diet(hypertension, Diet).
% ?- suggest_diet(heart_disease, Diet).
% ?- suggest_diet(anemia, Diet).
% ?- suggest_diet(obesity, Diet).
% ?- suggest_diet(gout, Diet).
% ?- suggest_diet(gluten_intolerance, Diet).
