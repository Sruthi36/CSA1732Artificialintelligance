import itertools

def calculate_distance(graph, route):
    total_distance = 0
    for i in range(len(route) - 1):
        total_distance += graph[route[i]][route[i + 1]]
    total_distance += graph[route[-1]][route[0]]  # Return to the start point
    return total_distance

def travelling_salesman(graph):
    # Generate all possible routes (permutations of cities)
    cities = list(graph.keys())
    all_routes = itertools.permutations(cities)
    
    min_distance = float('inf')
    best_route = None
    
    for route in all_routes:
        current_distance = calculate_distance(graph, route)
        if current_distance < min_distance:
            min_distance = current_distance
            best_route = route
            
    return best_route, min_distance

# Example usage
if __name__ == "__main__":
    # Example graph represented as an adjacency matrix
    graph = {
        'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
        'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
        'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
        'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
    }

    best_route, min_distance = travelling_salesman(graph)
    print("Best route:", best_route)
    print("Minimum distance:", min_distance)
