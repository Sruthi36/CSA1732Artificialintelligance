import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def get_empty_positions(board):
    empty_positions = []
    for i in range(len(board)):
        for j in range(len(board[i])):
            if board[i][j] == ' ':
                empty_positions.append((i, j))
    return empty_positions

def check_winner(board):
    # Check rows, columns, and diagonals
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != ' ':
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != ' ':
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
        return board[0][2]
    return None

def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == 'X':
        return 1
    elif winner == 'O':
        return -1
    elif not get_empty_positions(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for (i, j) in get_empty_positions(board):
            board[i][j] = 'X'
            eval = minimax(board, depth + 1, False)
            board[i][j] = ' '
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for (i, j) in get_empty_positions(board):
            board[i][j] = 'O'
            eval = minimax(board, depth + 1, True)
            board[i][j] = ' '
            min_eval = min(min_eval, eval)
        return min_eval

def best_move(board):
    best_val = -math.inf
    move = None
    for (i, j) in get_empty_positions(board):
        board[i][j] = 'X'
        move_val = minimax(board, 0, False)
        board[i][j] = ' '
        if move_val > best_val:
            best_val = move_val
            move = (i, j)
    return move

# Initialize an empty Tic-Tac-Toe board
board = [[' ' for _ in range(3)] for _ in range(3)]

# Main game loop
def main():
    print("Initial Board:")
    print_board(board)
    current_player = 'X'  # X is the maximizing player

    while not check_winner(board) and get_empty_positions(board):
        if current_player == 'X':
            move = best_move(board)
            if move:
                board[move[0]][move[1]] = 'X'
        else:
            move = tuple(map(int, input("Enter row and column for O (separated by space): ").split()))
            if board[move[0]][move[1]] == ' ':
                board[move[0]][move[1]] = 'O'
            else:
                print("Invalid move. Try again.")
                continue
        
        print_board(board)
        current_player = 'O' if current_player == 'X' else 'X'

    winner = check_winner(board)
    if winner:
        print(f"Player {winner} wins!")
    else:
        print("It's a tie!")

if __name__ == "__main__":
    main()
